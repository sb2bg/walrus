use crate::ast::{Node, NodeKind, Op};
use crate::span::Span;
use crate::error::RecoveredParseError;

grammar;

extern {
    type Error = RecoveredParseError;
}

pub Program = Sp<Statements>;

Statements: NodeKind = TrailingDelim<Statement, ";"> => NodeKind::Statements(<>);

Statement: Box<Node> = {
    Sp<If>,
    Sp<While>,
    Sp<Expr>,
    Sp<Func>,
    => Box::new(Node::new(NodeKind::Void, Span::default())),
};

BinOp<Op, Next>: NodeKind = {
    <left: Sp<BinOp<Op, Next>>> <o: Op> <right: Sp<Next>> => NodeKind::BinOp(left, o, right),
    Next,
};

Expr: NodeKind = BinOp<ExprOp, Factor>;
Factor: NodeKind = BinOp<FactorOp, Term>;

ExprOp: Op = {
    "+" => Op::Add,
    "-" => Op::Sub,
};

FactorOp: Op = {
    "*" => Op::Mul,
    "/" => Op::Div,
};

Term: NodeKind = {
	String,
	Bool,
	Ident,
};

String: NodeKind = {
	r#""[^"]*""# => NodeKind::String(<>[1..<>.len() - 1].to_string()),
};

Bool: NodeKind = {
	"true" => NodeKind::Bool(true),
	"false" => NodeKind::Bool(false),
};

Ident: NodeKind = {
	IdentStr => NodeKind::Ident(<>),
};

IdentStr: String = r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string();

If: NodeKind = {
	"if" <c: Sp<Expr>> <b: Sp<Block>> <e: Else> => NodeKind::If(c, b, e),
};

Else: Option<Box<Node>> = {
	"else" <Sp<Block>> => Some(<>),
	"else" <Sp<If>> => Some(<>),
};

While: NodeKind = {
    "while" <c: Sp<Expr>> <b: Sp<Block>> => NodeKind::While(c, b),
};

Func: NodeKind = {
    "fn" <n: IdentStr> <a: Paren<Comma<IdentStr>>> <b: Sp<Block>> => NodeKind::FunctionDefinition(n, a, b),
    "fn" <a: Paren<Comma<IdentStr>>> <b: Sp<Block>> => NodeKind::AnonFunctionDefinition(a, b),
};

Block = Brace<Statements>;
Brace<T>: T = "{" <T> "}";
Paren<T>: T = "(" <T> ")";
Bracket<T>: T = "[" <T> "]";
Comma<T> = Delim<T, ",">;

Delim<T, D>: Vec<T> = {
    <mut h: (<T> D)*> <t: T?> => match t {
        Some(t) => {
            h.push(t);
            h
        }
        None => h
    }
};

TrailingDelim<T, D>: Vec<T> = {
    <mut h: (<T> D)*> <t: T> D => {
        h.push(t);
        h
    }
};

Sp<Rule>: Box<Node> = <l: @L> <rule: Rule> <r: @R> => Box::new(Node::new(rule, Span(l, r)));