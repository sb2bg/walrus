use crate::ast::{Node, NodeKind};
use crate::vm::opcode::Opcode;
use crate::span::{Span, Spanned};
use crate::error::{RecoveredParseError, parse_int, parse_float, escape_string};
use lalrpop_util::ErrorRecovery;

grammar;

extern {
    type Error = RecoveredParseError;
}

pub Program = Sp<Statements>;

Statements: NodeKind = {
    TrailingDelim<Statement, ";"> => NodeKind::Statements(<>), // fixme: make so only certain statements require a trailing semicolon
    => NodeKind::Void,
}

Statement: Box<Node> = {
    Sp<If>,
    Sp<For>,
    Sp<While>,
    Sp<Expr>,
    Sp<Func>,
    Sp<Extern>,
    Sp<Assign>,
    Sp<Return>,
    Sp<Break>,
    Sp<Continue>,
    Sp<Import>,
    Sp<Print>,
    Sp<Throw>,
    Sp<Try>,
    Sp<Free>,
    Sp<Defer>,
};

BinOp<Op, Next>: NodeKind = {
    <left: Sp<BinOp<Op, Next>>> <o: Op> <right: Sp<Next>> => NodeKind::BinOp(left, o, right),
    Next,
};

Expr = BinOp<OrOp, And>;
And = BinOp<AndOp, Comparison>;
Comparison = BinOp<ComparisonOp, MathExpr>;
MathExpr = BinOp<ExprOp, MathFactor>;
MathFactor = BinOp<FactorOp, Unary>;

Unary = {
    <o: UnaryOp> <e: Sp<Unary>> => NodeKind::UnaryOp(o, e),
    Pow,
};

Pow = BinOp<PowOp, Call>;

Call = {
    <e: Sp<Atom>> <args: Paren<Comma<SpExpr>>> => NodeKind::FunctionCall(e, args),
    <e: Sp<Atom>> <args: Bracket<SpExpr>> => NodeKind::Index(e, args),
    Atom,
};

OrOp: Opcode = "or" => Opcode::Or;
AndOp: Opcode = "and" => Opcode::And;

ComparisonOp: Opcode = {
    "==" => Opcode::Equal,
    "!=" => Opcode::NotEqual,
    "<" => Opcode::Less,
    ">" => Opcode::Greater,
    "<=" => Opcode::LessEqual,
    ">=" => Opcode::GreaterEqual,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Subtract,
};

FactorOp: Opcode = {
    "*" => Opcode::Multiply,
    "/" => Opcode::Divide,
    "%" => Opcode::Modulo,
};

UnaryOp: Opcode = {
    "-" => Opcode::Negate,
    "not" => Opcode::Not,
};

PowOp: Opcode = {
    "**" => Opcode::Power,
};

Atom: NodeKind = {
    Int,
    Float,
	String,
	Bool,
	Ident,
	List,
	Dict,
	Lambda,
	Void,
	Range,
	Paren<Expr>,
};

// todo: add exponentials and underscores
Int: NodeKind = {
    StrSp<r"\d+"> =>? parse_int(<>, 10),
    StrSp<r"0x[0-9A-Fa-f]+"> =>? parse_int(<>, 16),
    StrSp<r"0o[0-7]+"> =>? parse_int(<>, 8),
    StrSp<r"0b[01]+"> =>? parse_int(<>, 2),
};

Float: NodeKind = {
    StrSp<r"\d+\.\d+"> =>? parse_float(<>),
};

String: NodeKind = {
	StrSp<r#""[^"]*""#> =>? escape_string(<>),
};

Bool: NodeKind = {
	"true" => NodeKind::Bool(true),
	"false" => NodeKind::Bool(false),
};

List: NodeKind = {
    Bracket<Comma<SpExpr>> => NodeKind::List(<>),
};

Dict: NodeKind = {
    Brace<Comma<DictEntry>> => NodeKind::Dict(<>),
};

DictEntry = <SpExpr> ":" <SpExpr>;

Ident: NodeKind = {
	IdentStr => NodeKind::Ident(<>),
};

IdentStr: String = r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string();

If: NodeKind = "if" <c: SpExpr> <b: SpBlock> <e: Else> => NodeKind::If(c, b, e);

Ternary: NodeKind = {
    <r: SpExpr> "if" <c: SpExpr> "else" <e: SpExpr> => NodeKind::Ternary(r, c, e),
}

Else: Option<Box<Node>> = {
	"else" <SpBlock> => Some(<>),
	"else" <Sp<If>> => Some(<>),
	=> None,
};

While: NodeKind = {
    "while" <c: SpExpr> <b: SpBlock> => NodeKind::While(c, b),
};

For: NodeKind = {
    "for" <v: IdentStr> "in" <i: SpExpr> <b: SpBlock> => NodeKind::For(v, i, b),
};

Func: NodeKind = {
    "fn" <n: IdentStr> ":" <a: Comma<IdentStr>> <b: SpBlock> => NodeKind::FunctionDefinition(n, a, b),
};

Lambda: NodeKind = {
    ":" <a: Comma<IdentStr>> <b: SpBlock> => NodeKind::AnonFunctionDefinition(a, b),
};

Range: NodeKind = {
    // fixme: limited to identifiers
    <l: SpIdent> ".." <u: SpIdent> => NodeKind::Range(Some(l), Some(u)),
    <l: SpIdent> ".." => NodeKind::Range(Some(l), None),
    ".." <u: SpIdent> => NodeKind::Range(None, Some(u)),
    ".." => NodeKind::Range(None, None),
};

Void: NodeKind = {
    "void" => NodeKind::Void,
};

Extern: NodeKind = {
    "extern fn" <n: IdentStr> ":" <a: Comma<IdentStr>> => NodeKind::ExternFunctionDefinition(n, a),
};

Assign: NodeKind = {
    "let" <n: IdentStr> "=" <e: SpExpr> => NodeKind::Assign(n, e),
    <n: StrSp<IdentStr>> "=" <e: SpExpr> => NodeKind::Reassign(n, e, Opcode::Equal),
    <n: StrSp<IdentStr>> "+=" <e: SpExpr> => NodeKind::Reassign(n, e, Opcode::Add),
    <n: StrSp<IdentStr>> "-=" <e: SpExpr> => NodeKind::Reassign(n, e, Opcode::Subtract),
    <n: StrSp<IdentStr>> "*=" <e: SpExpr> => NodeKind::Reassign(n, e, Opcode::Multiply),
    <n: StrSp<IdentStr>> "/=" <e: SpExpr> => NodeKind::Reassign(n, e, Opcode::Divide),
    <n: StrSp<IdentStr>> "%=" <e: SpExpr> => NodeKind::Reassign(n, e, Opcode::Modulo),
    <n: StrSp<IdentStr>> "**=" <e: SpExpr> => NodeKind::Reassign(n, e, Opcode::Power),
    <n: StrSp<IdentStr>> "or=" <e: SpExpr> => NodeKind::Reassign(n, e, Opcode::Or),
    <n: StrSp<IdentStr>> "and=" <e: SpExpr> => NodeKind::Reassign(n, e, Opcode::And),
    <n: Sp<Atom>> "[" <i: SpExpr> "]" "=" <e: SpExpr> => NodeKind::IndexAssign(n, i, e), // fixme: add ops, make x[n][m] work
};

Return: NodeKind = {
    "return" <SpExpr> => NodeKind::Return(<>),
};

Break: NodeKind = {
    "break" => NodeKind::Break,
};

Continue: NodeKind = {
    "continue" => NodeKind::Continue,
};

Import: NodeKind = {
    "import" <p: IdentStr> => NodeKind::PackageImport(p, None),
    "import" <m: r#""[^"]*""#> => NodeKind::ModuleImport(m[1..m.len() - 1].to_string(), None),
    "import" <p: IdentStr> "as" <a: IdentStr> => NodeKind::PackageImport(p, Some(a)),
    "import" <m: r#""[^"]*""#> "as" <a: IdentStr> => NodeKind::ModuleImport(m[1..m.len() - 1].to_string(), Some(a)),
};

Print: NodeKind = {
    "print" <SpExpr> => NodeKind::Print(<>),
    "println" <SpExpr> => NodeKind::Println(<>),
};

Throw: NodeKind = {
    "throw" <SpExpr> => NodeKind::Throw(<>),
};

Try: NodeKind = {
    "try" <b: SpBlock> "catch" <c: IdentStr> <e: SpBlock> => NodeKind::Try(b, c, e),
};

Free: NodeKind = {
    "free" <SpExpr> => NodeKind::Free(<>),
};

Defer: NodeKind = {
    "defer" <SpExpr> => NodeKind::Defer(<>),
};

Block = Brace<Statements>;
Brace<T>: T = "{" <T> "}";
Paren<T>: T = "(" <T> ")";
Bracket<T>: T = "[" <T> "]";
Comma<T> = Delim<T, ",">;

SpBlock = Sp<Block>;
SpExpr = Sp<Expr>;
SpIdent = Sp<Ident>;

Delim<T, D>: Vec<T> = {
    <mut h: (<T> D)*> <t: T?> => match t {
        Some(t) => {
            h.push(t);
            h
        }
        None => h
    }
};

TrailingDelim<T, D>: Vec<T> = {
    <mut h: (<T> D)*> <t: T> D => {
        h.push(t);
        h
    }
};

Sp<Rule>: Box<Node> = <l: @L> <rule: Rule> <r: @R> => Box::new(Node::new(rule, Span(l, r)));
StrSp<Rule>: Spanned<String> = <l: @L> <rule: Rule> <r: @R> => Spanned::new(rule.to_string(), Span(l, r));