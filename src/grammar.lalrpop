use crate::ast::{Node, Op};
use crate::span::{Span, Spanned};
use crate::error::{RecoveredParseError, parse_int, parse_float};

grammar;

extern {
    type Error = RecoveredParseError;
}

pub Program = Statement;

Statement: Box<Node> = {
    StatementHelper => Box::new(Node::Statement(<>)),
};

StatementHelper = DelimTrailing<Expr, ";">;

BinOp<Op, Next>: Box<Node> = {
    <l: @L> <left: BinOp<Op, Next>> <o: Op> <right: Next> <r: @R> => Box::new(Node::BinOp(left, o, right, Span(l, r))),
    Next
};

Expr: Box<Node> = BinOp<ExprOp, Factor>;

Factor: Box<Node> = BinOp<FactorOp, Term>;

ExprOp: Op = {
    "+" => Op::Add,
    "-" => Op::Sub,
};

FactorOp: Op = {
    "*" => Op::Mul,
    "/" => Op::Div,
};

Term: Box<Node> = {
    Int => Box::new(Node::Int(<>.value, <>.span)),
    Float => Box::new(Node::Float(<>.value, <>.span)),
    Sp<String> => Box::new(Node::String(<>.value, <>.span)),
    Sp<List> => Box::new(Node::List(<>.value, <>.span)),
    Sp<Ident> => Box::new(Node::Ident(<>.value, <>.span)),
    Sp<Brace<StatementHelper>> => Box::new(Node::Block(<>.value, <>.span)),
    "(" <Expr> ")"
};

Int: Spanned<i64> = {
    Sp<r"\d+"> =>? parse_int(<>, 10),
    Sp<r"0x[0-9A-Fa-f]+"> =>? parse_int(<>, 16),
    Sp<r"0o[0-7]+"> =>? parse_int(<>, 8),
    Sp<r"0b[01]+"> =>? parse_int(<>, 2),
};

Float: Spanned<f64> = {
    Sp<r"\d+\.\d+"> =>? parse_float(<>),
};

String: String = {
    r#""[^"]*""# => <>[1..<>.len() - 1].to_string(),
};

Bool: bool = {
    "true" => true,
    "false" => false,
};

Ident: String = {
   r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string(),
};

List = Bracket<Comma<Expr>>;

Keyword: Box<Node> = {
    Sp<"true"> => Box::new(Node::Bool(true, <>.span)),
    Sp<"false"> => Box::new(Node::Bool(false, <>.span)),
    Sp<"void"> => Box::new(Node::Void(<>.span)),
};

Brace<T> = "{" <T> "}";
Bracket<T> = "[" <T> "]";
Paren<T> = "(" <T> ")";
Comma<T> = Delim<T, ",">;

Sp<Rule>: Spanned<Rule> = <l: @L> <rule: Rule> <r: @R> => Spanned { value: rule, span: Span(l, r) };

Delim<T, D>: Vec<T> = {
    <mut h: (<T> D)*> <t: T?> => match t {
        Some(t) => {
            h.push(t);
            h
        }
        None => h
    }
};

DelimTrailing<T, D>: Vec<T> = {
    <mut h: (<T> D)*> <t: T> D => {
        h.push(t);
        h
    }
};